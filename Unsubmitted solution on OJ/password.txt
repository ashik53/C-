
//UVA-password , Backtracking, implementation and

/*How to compile
g++ -o main main.cpp, then main
*/
#include <bits/stdc++.h>
using namespace std;
vector<string>digitList;
vector<string> dict,constrainList;
int totalConstraints,totalWords;
char ara[10] = {'0','1','2','3','4','5','6','7','8','9'};
int cnt[10];
void backTrack(int len,int sz,string str);
int digitCounting(string str);
void solution();
void answer(string word,string restriction);
int main(void){

  std::ios_base::sync_with_stdio(0);

  string str;

  while((scanf("%d",&totalWords))==1){
    dict.clear(); // clear the dictionary
    constrainList.clear();// clear constraintList vector
    for(int i=0;i<totalWords;i++){
       cin>> str;
       dict.push_back(str);
    }//push words into the dictionary

    scanf("%d",&totalConstraints);
    for(int i=0;i<totalConstraints;i++){
        cin>> str;
        constrainList.push_back(str);
    }//push constraints into the list

    //input taking end here,start solving the problem from here
    for(int i=0;i<totalConstraints;i++){
        int len = digitCounting(constrainList[i]);
        //cout<< len<<endl;
        digitList.clear();
        backTrack(len,0,"");
        solution();
    }//all constraints one by one

  }//input loop

}//main function
void solution(){

  int dictSize,sz;
  dictSize = dict.size();
  sz = constrainList.size();
  for(int i=0;i<dictSize;i++){
     string word = dict[i];
     for(int j=0;j<sz;j++){
        string restriction = constrainList[j];
        answer(word,restriction);
     }
  }

}//solution
void answer(string word,string restriction){

  int sz = digitList.size();
  int sz1 = restriction.size();

  for(int i=0;i<sz;i++){
      string str = digitList[i];
      int k = 0;
      for(int j=0;j<sz1;j++){
          if(restriction[j]=='#') cout<< word;
          else {
            cout<<str[k];
            k++;
          }
      }
      printf("\n");
  }


}
int digitCounting(string str){

  int sz  = str.size();
  int len = 0;
  for(int i=0;i<sz;i++){
     if(str[i]=='0') len++;
  }


  for(int i=0;i<10;i++){
    cnt[i] = len;
  }

  return len;

}
void backTrack(int len,int sz,string str){

  if(sz==len){
     digitList.push_back(str);
     //cout<< str<<endl;
     return;
  }

  for(int i=0;i<10;i++){

     if(cnt[i]==0) continue;

     cnt[i]--;
     str.push_back(ara[i]);
     backTrack(len,sz+1,str);
     cnt[i]++;
     str.erase(str.end()-1);
  }


}// main recursive solution

