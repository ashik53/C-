





//UVA-677 dp,easy backtracking

/*How to compile
g++ -o main main.cpp, then main
*/


#include<bits/stdc++.h>
using namespace std;

#define PII pair<int,int >

bool adjMatrix[11][11];
int maxLen,totalNodes;
char ara[10] = {'0','1','2','3','4','5','6','7','8','9'};
vector<string> pathList;
int taken[10];
string str1;
bool solve();
void recursion(int sz);
bool validityChecking(string& str);
int main() {

  int input,have,line = 0;






    do {

        if(line>0) printf("\n");

        scanf("%d%d",&totalNodes,&maxLen);

        for(int i=0;i<totalNodes;i++){
            for(int j=0;j<totalNodes;j++){
                scanf("%d",&input);
                if(input==1) {
                   adjMatrix[i][j] = true;
                   adjMatrix[j][i] = true;
                }
                else {
                   adjMatrix[i][j] = false;
                   adjMatrix[j][i] = false;
                }
            }//nested for
        } //input taking

        bool ans = solve();
        if(!ans) printf("no walk of length %d\n",maxLen);
        line++;

    }while(scanf("%d",&have)==1 && have == -9999 );
   return 0;
} //main function

bool solve(){

  bool ans = true;

  pathList.clear();
  memset(taken,0,sizeof(taken));
  str1.clear();
  recursion(0);

  if(pathList.size()==0) return false;
  int sz = pathList.size();

  for(int i=0;i<sz;i++){

    printf("(");
    string str = pathList[i];
    for(int j=0;j<maxLen+1;j++){
        char ch = str[j];
        int n = ch-'0';
        n++;
        printf("%d",n);
        if(j!=maxLen) printf(",");
    }


    printf(")\n");
  }

  return true;

}

void recursion(int sz){

 if(sz==maxLen+1) {

        pathList.push_back(str1);


   return;
 }

 for(int i=0;i<totalNodes;i++){
    if(taken[i]==1) continue;
    if(sz==0 && ara[i]!='0') continue;

        char ch1,ch2;
        ch1 = str1[sz-1];
        ch2 = ara[i];
        int x1,x2;
        x1 = ch1-'0';
        x2 = ch2 - '0';


    if(sz>0 && (adjMatrix[x1][x2]==false ||adjMatrix[x2][x1]==false )) continue;
    taken[i] = 1;
    str1.push_back((ara[i]));
    recursion(sz+1);
    taken[i] = 0;
    str1.erase(str1.end()-1);
 }

}

/*bool validityChecking(string& str){

   if(str[0]!='1') return false;

   for(int i=0;i<maxLen;i++){

       int x1,x2;
       x1 = str[i] -'0';
       x2 = str[i+1] - '0';

       if(adjMatrix[x1][x2]==false || adjMatrix[x2][x1]==false){
          cout<<adjMatrix[x1][x2]<< ", no path between "<<x1 << " and " << x2 <<endl;
          return false;
       }

   }

   return true;
} */
